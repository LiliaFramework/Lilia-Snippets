{
    "CLASS:OnCanBe": {
        "prefix": "CLASS:OnCanBe",
        "body": [
            "function CLASS:OnCanBe(client)\n\t$0\nend"
        ],
        "description": "Whether or not a player can switch to this class."
    }, 

    "CLASS:OnLeave": {
        "prefix": "CLASS:OnLeave",
        "body": [
            "function CLASS:OnLeave(client)\n\t$0\nend"
        ],
        "description": "Called when a character has left this class and has joined a different one."
    },

    "CLASS:OnSet": {
        "prefix": "CLASS:OnSet",
        "body": [
            "function CLASS:OnSet(client)\n\t$0\nend"
        ],
        "description": "Called when a character has joined this class."
    },
    
    "CLASS:OnSpawn": {
        "prefix": "CLASS:OnSpawn",
        "body": [
            "function CLASS:OnSpawn(client)\n\t$0\nend"
        ],
        "description": "Called when a character in this class has spawned in the world."
    },

    "FACTION:GetDefaultName": {
        "prefix": "FACTION:GetDefaultName",
        "body": [
            "function FACTION:GetDefaultName(client)\n\t$0\nend"
        ],
        "description": "Called when the default name for a character needs to be retrieved (i.e upon initial creation)."
    },

    "FACTION:GetDefaultDesc": {
        "prefix": "FACTION:GetDefaultDesc",
        "body": [
            "function FACTION:GetDefaultDesc(client)\n\t$0\nend"
        ],
        "description": "Called when the default description for a character needs to be retrieved. This function allows factions to define custom default descriptions for characters."
    },

    "FACTION:OnCharCreated": {
        "prefix": "FACTION:OnCharCreated",
        "body": [
            "function FACTION:OnCharCreated(client, character)\n\t$0\nend"
        ],
        "description": "Called when a character has been initially created and assigned to this faction."
    },

    "FACTION:OnSpawn": {
        "prefix": "FACTION:OnSpawn",
        "body": [
            "function FACTION:OnSpawn(client)\n\t$0\nend"
        ],
        "description": "Called when a character in this faction has spawned in the world."
    },

    "FACTION:OnTransferred": {
        "prefix": "FACTION:OnTransferred",
        "body": [
            "function FACTION:OnTransferred(character)\n\t$0\nend"
        ],
        "description": "Called when a player's character has been transferred to this faction."
    },

	"MODULE:CanItemBeTransfered": {
		"prefix": "MODULE:CanItemBeTransfered",
		"body": [
			"function MODULE:CanItemBeTransfered(item, currentInv, oldInv)\n\t$0\nend"
		],
		"description": "Determines whether an item can be transferred between inventories."
	},

	"MODULE:CanPlayerAccessDoor": {
		"prefix": "MODULE:CanPlayerAccessDoor",
		"body": [
			"function MODULE:CanPlayerAccessDoor(client, door, access)\n\t$0\nend"
		],
		"description": "Called when a player tries to use abilities on the door, such as locking."
	},

	"MODULE:CanPlayerAccesVendor": {
		"prefix": "MODULE:CanPlayerAccesVendor",
		"body": [
			"function MODULE:CanPlayerAccessVendor(client)\n\t$0\nend"
		],
		"description": "Determines whether a player is allowed to access a vendor entity. This hook can be used to implement custom checks to determine if a player is allowed to access a specific vendor entity."
	},

	"MODULE:CanPlayerCreateCharacter":{
		"prefix": "MODULE:CanPlayerCreateCharacter",
		"body": [
			"function MODULE:CanPlayerCreateCharacter(client)\n\t$0\nend"
		],
		"description": "Whether or not a player is allowed to create a new character."
	},

	"MODULE:CanPlayerDropItem": {
		"prefix": "MODULE:CanPlayerDropItem",
		"body": [
			"function MODULE:CanPlayerDropItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player is allowed to drop the given item."
	},
	
	"MODULE:CanPlayerEarnSalary": {
		"prefix": "MODULE:CanPlayerEarnSalary",
		"body": [
			"function MODULE:CanPlayerEarnSalary(client, faction, class)\n\t$0\nend"
		],
		"description": "Whether or not a player can earn money at regular intervals. This hook runs only if the player's character faction has a salary set i.e FACTION.pay is set to something other than 0 for their faction."
	}, 

	"MODULE:CanPlayerEquipItem": {
		"prefix": "MODULE:CanPlayerEquipItem",
		"body": [
			"function MODULE:CanPlayerEquipItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can equip the given item. This is called for items with outfit, pacoutfit, or weapons as their base. Schemas/modules can utilize this hook for their items."
	},

	"MODULE:CanPlayerInteractItem": {
		"prefix": "MODULE:CanPlayerInteractItem", 
		"body": [
			"function MODULE:CanPlayerInteractItem(client, action, item)\n\t$0\nend"
		],
		"description": "Whether or not a player is allowed to interact with an item via an inventory action (e.g picking up, dropping, transferring inventories, etc). Note that this is for an item table, not an item entity. This is called after CanPlayerDropItem and CanPlayerTakeItem."
	},

	"MODULE:CanPlayerJoinClass": {
		"prefix": "MODULE:CanPlayerJoinClass", 
		"body": [
			"function MODULE:CanPlayerJoinClass(client, class, info)\n\t$0\nend"
		],
		"description": "Whether or not a player is allowed to join a class."
	},
	
	"MODULE:CanPlayerSpawnStorage": {
		"prefix": "MODULE:CanPlayerSpawnStorage", 
		"body": [
			"function MODULE:CanPlayerSpawnStorage(client, entity, data)\n\t$0\nend"
		],
		"description": "Whether or not a player is allowed to spawn a container entity."
	},

	"MODULE:CanPlayerTakeItem": {
		"prefix": "MODULE:CanPlayerTakeItem", 
		"body": [
			"function MODULE:CanPlayerTakeItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player is allowed to take an item and put it in their inventory."
	},
	
	"MODULE:CanPlayerThrowPunch": {
		"prefix": "MODULE:CanPlayerThrowPunch", 
		"body": [
			"function MODULE:CanPlayerThrowPunch(client)\n\t$0\nend"
		],
		"description": "Whether or not the player is allowed to punch with the hands SWEP."
	},

	"MODULE:CanPlayerTradeWithVendor": {
		"prefix": "MODULE:CanPlayerTradeWithVendor",
		"body": [
			"function MODULE:CanPlayerTradeWithVendor(client, entity, uniqueID, isSellingToVendor)\n\t$0\nend"
		],
		"description": "Whether or not a player can trade with a vendor."
	},

	"MODULE:CanPlayerUnequipItem": {
		"prefix": "MODULE:CanPlayerUnequipItem",
		"body": [
			"function MODULE:CanPlayerUnequipItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can unequip an item."
	},

	"MODULE:CanPlayerUseChar": {
		"prefix": "MODULE:CanPlayerUseChar",
		"body": [
			"function MODULE:CanPlayerUnequipItem(client, character)\n\t$0\nend"
		],
		"description": "Determines whether a player is allowed to use a specific character. This hook can be used to implement custom checks to determine if a player is allowed to use a particular character."
	},
	
	"MODULE:CanPlayerUseDoor": {
		"prefix": "MODULE:CanPlayerUseDoor",
		"body": [
			"function MODULE:CanPlayerUseDoor(client, entity)\n\t$0\nend"
		],
		"description": "Determines whether a player is allowed to use a door entity. This hook can be used to implement custom checks to determine if a player is allowed to use a specific door entity."
	},

	"MODULE:CanPlayerViewInventory": {
		"prefix": "MODULE:CanPlayerViewInventory",
		"body": [
			"function MODULE:CanPlayerViewInventory()\n\t$0\nend"
		],
		"description": "Determines whether a player is allowed to view their inventory."
	},
	
	"MODULE:CharDeleted": {
		"prefix": "MODULE:CharDeleted",
		"body": [
			"function MODULE:CharDeleted(client, character)\n\t$0\nend"
		],
		"description": "Called after a character is deleted."
	},

	"MODULE:CharHasFlags": {
		"prefix": "MODULE:CharHasFlags",
		"body": [
			"function MODULE:CharHasFlags(character, flags)\n\t$0\nend"
		],
		"description": "Determines if a character has the given flag(s)."
	},

	"MODULE:CharLoaded": {
		"prefix": "MODULE:CharLoaded",
		"body": [
			"function MODULE:CharLoaded(character)\n\t$0\nend"
		],
		"description": "Called when a character is loaded. This function is called after a character has been successfully loaded."
	},

	"MODULE:CharPostSave": {
		"prefix": "MODULE:CharPostSave",
		"body": [
			"function MODULE:CharPostSave(character)\n\t$0\nend"
		],
		"description": "Called after a character has been saved. This function is called after a character has been successfully saved."
	},

	"MODULE:CharPreSave": {
		"prefix": "MODULE:CharPreSave",
		"body": [
			"function MODULE:CharPreSave(character)\n\t$0\nend"
		],
		"description": "Called before a character is saved. This function is called before a character is about to be saved."
	},

	"MODULE:CharRecognize": {
		"prefix": "MODULE:CharRecognize",
		"body": [
			"function MODULE:CharRecognize(level, name)\n\t$0\nend"
		],
		"description": "Initiates character recognition process."
	},

	"MODULE:CharacterVendorTraded": {
		"prefix": "MODULE:CharacterVendorTraded",
		"body": [
			"function MODULE:CharacterVendorTraded(client, entity, uniqueID, isSellingToVendor)\n\t$0\nend"
		],
		"description": "Called when a character trades with a vendor entity. This function can be used to perform additional actions when a character trades with a vendor entity."
	}
}