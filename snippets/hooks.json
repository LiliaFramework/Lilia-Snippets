{
    "CLASS:OnCanBe": {
        "prefix": "CLASS:OnCanBe",
        "body": [
            "function CLASS:OnCanBe(client)\n\t$0\nend"
        ],
        "description": "Whether or not a player can switch to this class."
    }, 

    "CLASS:OnLeave": {
        "prefix": "CLASS:OnLeave",
        "body": [
            "function CLASS:OnLeave(client)\n\t$0\nend"
        ],
        "description": "Called when a character has left this class and has joined a different one."
    },

    "CLASS:OnSet": {
        "prefix": "CLASS:OnSet",
        "body": [
            "function CLASS:OnSet(client)\n\t$0\nend"
        ],
        "description": "Called when a character has joined this class."
    },
    
    "CLASS:OnSpawn": {
        "prefix": "CLASS:OnSpawn",
        "body": [
            "function CLASS:OnSpawn(client)\n\t$0\nend"
        ],
        "description": "Called when a character in this class has spawned in the world."
    },

    "FACTION:GetDefaultName": {
        "prefix": "FACTION:GetDefaultName",
        "body": [
            "function FACTION:GetDefaultName(client)\n\t$0\nend"
        ],
        "description": "Called when the default name for a character needs to be retrieved (i.e upon initial creation)."
    },

    "FACTION:GetDefaultDesc": {
        "prefix": "FACTION:GetDefaultDesc",
        "body": [
            "function FACTION:GetDefaultDesc(client)\n\t$0\nend"
        ],
        "description": "Called when the default description for a character needs to be retrieved. This function allows factions to define custom default descriptions for characters."
    },

    "FACTION:OnCharCreated": {
        "prefix": "FACTION:OnCharCreated",
        "body": [
            "function FACTION:OnCharCreated(client, character)\n\t$0\nend"
        ],
        "description": "Called when a character has been initially created and assigned to this faction."
    },

    "FACTION:OnSpawn": {
        "prefix": "FACTION:OnSpawn",
        "body": [
            "function FACTION:OnSpawn(client)\n\t$0\nend"
        ],
        "description": "Called when a character in this faction has spawned in the world."
    },

    "FACTION:OnTransferred": {
        "prefix": "FACTION:OnTransferred",
        "body": [
            "function FACTION:OnTransferred(character)\n\t$0\nend"
        ],
        "description": "Called when a player's character has been transferred to this faction."
    },

	"MODULE:CanPlayerDropItem": {
		"prefix": "MODULE:CanPlayerDropItem",
		"body": [
			"function MODULE:CanPlayerDropItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can drop an item."
	},
	"MODULE:CanPlayerEquipItem": {
		"prefix": "MODULE:CanPlayerEquipItem",
		"body": [
			"function MODULE:CanPlayerEquipItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can equip an item."
	},
	"MODULE:CanPlayerInteractItem": {
		"prefix": "MODULE:CanPlayerInteractItem",
		"body": [
			"function MODULE:CanPlayerInteractItem(client, item, action)\n\t$0\nend"
		],
		"description": "Whether or not a player can interact with an item."
	},
	"MODULE:CanPlayerPickupItem": {
		"prefix": "MODULE:CanPlayerPickupItem",
		"body": [
			"function MODULE:CanPlayerPickupItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can pick up an item."
	},
	"MODULE:CanPlayerUnequipItem": {
		"prefix": "MODULE:CanPlayerUnequipItem",
		"body": [
			"function MODULE:CanPlayerUnequipItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can unequip an item."
	},
	"MODULE:InitializedConfig": {
		"prefix": "MODULE:InitializedConfig",
		"body": [
			"function MODULE:InitializedConfig()\n\t$0\nend"
		],
		"description": "Called when the config has been initialized."
	},
	"MODULE:InitializedModules": {
		"prefix": "MODULE:InitializedModules",
		"body": [
			"function MODULE:InitializedModules()\n\t$0\nend"
		],
		"description": "Called when the modules have been initialized."
	},
	"MODULE:InitializedSchema": {
		"prefix": "MODULE:InitializedSchema",
		"body": [
			"function MODULE:InitializedSchema()\n\t$0\nend"
		],
		"description": "Called when the schema has been initialized."
	},
	"MODULE:LoadData": {
		"prefix": "MODULE:LoadData",
		"body": [
			"function MODULE:LoadData()\n\t$0\nend"
		],
		"description": "Called when the data has been loaded."
	},
	"MODULE:LoadFonts": {
		"prefix": "MODULE:LoadFonts",
		"body": [
			"function MODULE:LoadFonts(font, genericFont)\n\t$0\nend"
		],
		"description": "Called when the fonts have been loaded."
	},
	"MODULE:ModuleLoaded": {
		"prefix": "MODULE:ModuleLoaded",
		"body": [
			"function MODULE:ModuleLoaded()\n\t$0\nend"
		],
		"description": "Called when the module has been loaded."
	},
	"MODULE:OnItemSpawned": {
		"prefix": "MODULE:OnItemSpawned",
		"body": [
			"function MODULE:OnItemSpawned(entity)\n\t$0\nend"
		],
		"description": "Called whenever an item entity has spawned in the world. You can access the entity's item table with entity:getItemTable()"
	},
	"MODULE:OnPickupMoney":{
		"prefix": "MODULE:OnPickupMoney",
		"body": [
			"function MODULE:OnPickupMoney(client, moneyEntity)\n\t$0\nend"
		],
		"description": "Called when a player picks up money. This function is called when a player picks up money from the groun"
	},
	"MODULE:PlayerModelChanged": {
		"prefix": "MODULE:PlayerModelChanged",
		"body": [
			"function MODULE:PlayerModelChanged(client, model)\n\t$0\nend"
		],
		"description": "Called when a player's model has changed."
	},
	"MODULE:PostLoadData": {
		"prefix": "MODULE:PostLoadData",
		"body": [
			"function MODULE:PostLoadData()\n\t$0\nend"
		],
		"description": "Called after the data has been loaded."
	},
	"MODULE:SaveData": {
		"prefix": "MODULE:SaveData",
		"body": [
			"function MODULE:SaveData()\n\t$0\nend"
		],
		"description": "Called when the data has been saved."
	},
	"MODULE:ScreenResolutionChanged": {
		"prefix": "MODULE:ScreenResolutionChanged",
		"body": [
			"function MODULE:ScreenResolutionChanged(oldWidth, oldHeight, width, height)\n\t$0\nend"
		],
		"description": "Called when the screen resolution has changed."
	},
	"MODULE:ShouldClientDrown": {
		"prefix": "MODULE:ShouldClientDrown",
		"body": [
			"function MODULE:ShouldClientDrown(client)\n\t$0\nend"
		],
		"description": "Whether or not a player should drown."
	},
	"MODULE:ShouldDataBeSaved": {
		"prefix": "MODULE:ShouldDataBeSaved",
		"body": [
			"function MODULE:ShouldDataBeSaved()\n\t$0\nend"
		],
		"description": "Whether or not the data should be saved."
	},
	"MODULE:AdjustStaminaOffset": {
		"prefix": "MODULE:AdjustStaminaOffset",
		"body": [
			"function MODULE:AdjustStaminaOffset(client, offset)\n\t$0\nend"
		],
		"description": "Adjust the stamina offset."
	},
	"MODULE:AdjustStaminaOffsetRunning": {
		"prefix": "MODULE:AdjustStaminaOffsetRunning",
		"body": [
			"function MODULE:AdjustStaminaOffsetRunning(client, offset)\n\t$0\nend"
		],
		"description": "Adjust the stamina offset when running."
	},
	"MODULE:AdjustStaminaRegeneration": {
		"prefix": "MODULE:AdjustStaminaRegeneration",
		"body": [
			"function MODULE:AdjustStaminaRegeneration(client, regeneration)\n\t$0\nend"
		],
		"description": "Adjust the stamina regeneration."
	},
	"MODULE:CalcStaminaChange": {
		"prefix": "MODULE:CalcStaminaChange",
		"body": [
			"function MODULE:CalcStaminaChange(client, change)\n\t$0\nend"
		],
		"description": "Calculate the stamina change."
	},
	"MODULE:CanPlayerThrowPunch": {
		"prefix": "MODULE:CanPlayerThrowPunch",
		"body": [
			"function MODULE:CanPlayerThrowPunch(client)\n\t$0\nend"
		],
		"description": "Whether or not a player can throw a punch."
	},
	"MODULE:CanPlayerViewAttrivutes": {
		"prefix": "MODULE:CanPlayerViewAttrivutes",
		"body": [
			"function MODULE:CanPlayerViewAttrivutes(client)\n\t$0\nend"
		],
		"description": "Whether or not a player can view attributes."
	},
	"MODULE:CharMaxStamina": {
		"prefix": "MODULE:CharMaxStamina",
		"body": [
			"function MODULE:CharMaxStamina(character)\n\t$0\nend"
		],
		"description": "The maximum stamina of a character."
	},
	"MODULE:GetStartAttribPoints": {
		"prefix": "MODULE:GetStartAttribPoints",
		"body": [
			"function MODULE:GetStartAttribPoints(client, context)\n\t$0\nend"
		],
		"description": "The starting attribute points of a character."
	},
	"MODULE:OnCharAttribBoosted": {
		"prefix": "MODULE:OnCharAttribBoost",
		"body": [
			"function MODULE:OnCharAttribBoost(client, character, key, value)\n\t$0\nend"
		],
		"description": "Called when a character's attribute is boosted."
	},
	"MODULE:PlayerCanPickupItem": {
		"prefix": "MODULE:PlayerCanPickupItem",
		"body": [
			"function MODULE:PlayerCanPickupItem(client, item)\n\t$0\nend"
		],
		"description": "Whether or not a player can pick up an item."
	},
	"MODULE:PlayerStaminaGained": {
		"prefix": "MODULE:PlayerStaminaGained",
		"body": [
			"function MODULE:PlayerStaminaGained(client)\n\t$0\nend"
		],
		"description": "Called when a player has gained stamina."
	},
	"MODULE:PlayerStaminaLost": {
		"prefix": "MODULE:PlayerStaminaLost",
		"body": [
			"function MODULE:PlayerStaminaLost(client)\n\t$0\nend"
		],
		"description": "Called when a player has lost stamina."
	},
	"MODULE:BodygrouperClosetAddUser": {
		"prefix": "MODULE:BodygrouperClosetAddUser",
		"body": [
			"function MODULE:BodygrouperClosetAddUser(closet, client)\n\t$0\nend"
		],
		"description": "Called when a player has added a user to a bodygrouper closet."
	},
	"MODULE:BodygrouperClosetRemoveUser": {
		"prefix": "MODULE:BodygrouperClosetRemoveUser",
		"body": [
			"function MODULE:BodygrouperClosetRemoveUser(closet, client)\n\t$0\nend"
		],
		"description": "Called when a player has removed a user from a bodygrouper closet."
	},
	"MODULE:ChadAddText": {
		"prefix": "MODULE:ChadAddText",
		"body": [
			"function MODULE:ChadAddText(text, ...)\n\t$0\nend"
		],
		"description": "Called to add text to the chat. This hook allows for customization of the text being added to the chat. It can be used to modify or format the text before it is displayed."
	},
	"MODULE:ChatTextChanged": {
		"prefix": "MODULE:ChatTextChanged",
		"body": [
			"function MODULE:ChatTextChanged(text)\n\t$0\nend"
		],
		"description": "Called when the text in the chat input box changes. This hook allows for additional actions or modifications to be made whenever the chat input text changes."
	},
	"MODULE:FinishChat()":{
		"prefix": "MODULE:FinishChat",
		"body": [
			"function MODULE:FinishChat()\n\t$0\nend"
		],
		"description": "Called when the chat has been finished."
	},
	"MODULE:OnChatReceived": {
		"prefix": "MODULE:OnChatReceived",
		"body": [
			"function MODULE:OnChatReceived(client, message, chatType, anonymous)\n\t$0\nend"
		],
		"description": "Called when a player has received a chat message."
	},
	"MODULE:PostPlayerSay": {
		"prefix": "MODULE:PostPlayerSay",
		"body": [
			"function MODULE:PostPlayerSay(client, message, chatType, anonymous)\n\t$0\nend"
		],
		"description": "Called after a player has said something."
	},
	"MODULE:StartChat()": {
		"prefix": "MODULE:StartChat",
		"body": [
			"function MODULE:StartChat()\n\t$0\nend"
		],
		"description": "Called when the chat input box is opened."
	},
	"MODULE:CanPlayerAccessDoor": {
		"prefix": "MODULE:CanPlayerAccessDoor",
		"body": [
			"function MODULE:CanPlayerAccessDoor(client, door, access)\n\t$0\nend"
		],
		"description": "Whether or not a player can access a door."
	},
	"MODULE:CanPlayerUseDoor": {
		"prefix": "MODULE:CanPlayerUseDoor",
		"body": [
			"function MODULE:CanPlayerUseDoor(client, entity)\n\t$0\nend"
		],
		"description": "Whether or not a player can use a door."
	},
	"MODULE:KeyLock":{ 
		"prefix": "MODULE:KeyLock",
		"body": [
			"function MODULE:KeyLock(owner, entity, time)\n\t$0\nend"
		],
		"description": "Called when a player locks a door with a key."
	},
	"MODULE:KeyUnlock": {
		"prefix": "MODULE:KeyUnlock",
		"body": [
			"function MODULE:KeyUnlock(owner, entity, time)\n\t$0\nend"
		],
		"description": "Called when a player unlocks a door with a key."
	},
	"MODULE:OnPlayerPurchaseDoor": {
		"prefix": "MODULE:OnPlayerPurchaseDoor",
		"body": [
			"function MODULE:OnPlayerPurchaseDoor(client, entity, buying, CallOnDoorChild)\n\t$0\nend"
		],
		"description": "Called when a player purchases a door."
	},
	"MODULE:PlayerUseDoor": {
		"prefix": "MODULE:PlayerUseDoor",
		"body": [
			"function MODULE:PlayerUseDoor(client, entity)\n\t$0\nend"
		],
		"description": "Called when a player uses a door."
	},
	"MODULE:ToggleLock": {
		"prefix": "MODULE:ToggleLock",
		"body": [
			"function MODULE:ToggleLock(client, door, state)\n\t$0\nend"
		],
		"description": "Called when a player toggles a door lock."
	},
	"MODULE:callOnDoorChildren": {
		"prefix": "MODULE:callOnDoorChildren",
		"body": [
			"function MODULE:callOnDoorChildren(entity, callback)\n\t$0\nend"
		],
		"description": "Call a function on all door children."
	},
	"MODULE:copyParentDoor": {
		"prefix": "MODULE:copyParentDoor",
		"body": [
			"function MODULE:copyParentDoor(child)\n\t$0\nend"
		],
		"description": "Copies the parent door's properties to a child door. "
	},
	"MODULE:BuildHelpMenu": {
		"prefix": "MODULE:BuildHelpMenu",
		"body": [
			"function MODULE:BuildHelpMenu(tabs)\n\t$0\nend"
		],
		"description": "Build the help menu."
	},
	"MODULE:CanPlayerViewInventory": {
		"prefix": "MODULE:CanPlayerViewInventory",
		"body": [
			"function MODULE:CanPlayerViewInventory()\n\t$0\nend"
		],
		"description": "Whether or not a player can view an inventory."
	},
	"MODULE:CreateMenuButtons": {
		"prefix": "MODULE:CreateMenuButtons",
		"body": [
			"function MODULE:CreateMenuButtons(tabs)\n\t$0\nend"
		],
		"description": "Create the menu buttons."
	},
	"MODULE:PostDrawInventory": {
		"prefix": "MODULE:PostDrawInventory",
		"body": [
			"function MODULE:PostDrawInventory(panel)\n\t$0\nend"
		],
		"description": "Called after the inventory has been drawn."
	},
	"MODULE:OnSavedItemLoaded": {
		"prefix": "MODULE:OnSavedItemLoaded",
		"body": [
			"function MODULE:OnSavedItemLoaded(loadedItems)\n\t$0\nend"
		],
		"description": "Called when a saved item has been loaded."
	},
	"MODULE:ShouldDeleteSavedItems": {
		"prefix": "MODULE:ShouldDeleteSavedItems",
		"body": [
			"function MODULE:ShouldDeleteSavedItems()\n\t$0\nend"
		],
		"description": "Whether or not saved items should be deleted."
	},
	"MODULE:CharRecognize": {
		"prefix": "MODULE:CharRecognize",
		"body": [
			"function MODULE:CharRecognize(level, name)\n\t$0\nend"
		],
		"description": "Initiates character recognition process."
	},
	"MODULE:GetDisplayedDescription": {
		"prefix": "MODULE:GetDisplayedDescription",
		"body": [
			"function MODULE:GetDisplayedDescription(entity, isHUD)\n\t$0\nend"
		],
		"description": "Retrieves the displayed description of an entity."
	},
	"MODULE:GetDisplayedName": {
		"prefix": "MODULE:GetDisplayedName",
		"body": [
			"function MODULE:GetDisplayedName(client, chatType)\n\t$0\nend"
		],
		"description": "Retrieves the displayed name of a client."
	},
	"MODULE:OnCharRecognized": {
		"prefix": "MODULE:OnCharRecognized",
		"body": [
			"function MODULE:OnCharRecognized(client, id)\n\t$0\nend"
		],
		"description": "Called when a character has been recognized."
	},
	"MODULE:isCharFakeRecognized": {
		"prefix": "MODULE:isCharFakeRecognized",
		"body": [
			"function MODULE:isCharFakeRecognized(client, id)\n\t$0\nend"
		],
		"description": "Whether or not a character is fake recognized."
	},
	"MODULE:isCharRecognized": {
		"prefix": "MODULE:isCharRecognized",
		"body": [
			"function MODULE:isCharRecognized(client, id)\n\t$0\nend"
		],
		"description": "Whether or not a character is recognized."
	},
	"MODULE:isFakeNameExistant": {
		"prefix": "MODULE:isFakeNameExistant",
		"body": [
			"function MODULE:isFakeNameExistant(name, nameList)\n\t$0\nend"
		],
		"description": "Whether or not a fake name exists."
	},
	"MODULE:isRecognizedChatType": {
		"prefix": "MODULE:isRecognizedChatType",
		"body": [
			"function MODULE:isRecognizedChatType(chatType)\n\t$0\nend"
		],
		"description": "Whether or not a chat type is recognized."
	},
	"MODULE:CanPlayerEarnSalary": {
		"prefix": "MODULE:CanPlayerEarnSalary",
		"body": [
			"function MODULE:CanPlayerEarnSalary(client, faction, class)\n\t$0\nend"
		],
		"description": "Whether or not a player can earn a salary."
	},
	"MODULE:CreateSalaryTimer": {
		"prefix": "MODULE:CreateSalaryTimer",
		"body": [
			"function MODULE:CreateSalaryTimer(client)\n\t$0\nend"
		],
		"description": "Create the salary timer."
	},
	"MODULE:GetSalaryAmount": {
		"prefix": "MODULE:GetSalaryAmount",
		"body": [
			"function MODULE:GetSalaryAmount(client, faction, class)\n\t$0\nend"
		],
		"description": "Retrieves the salary amount."
	},
	"MODULE:GetSalaryLimit": {
		"prefix": "MODULE:GetSalaryLimit",
		"body": [
			"function MODULE:GetSalaryLimit(client, faction, class)\n\t$0\nend"
		],
		"description": "Retrieves the salary limit."
	},
	"MODULE:ShouldAllowScoreboardOverride": {
		"prefix": "MODULE:ShouldAllowScoreboardOverride",
		"body": [
			"function MODULE:ShouldAllowScoreboardOverride(client, var)\n\t$0\nend"
		],
		"description": "Determines whether a scoreboard value should be overridden."
	},
	"MODULE:ShouldShowPlayerOnScoreboard": {
		"prefix": "MODULE:ShouldShowPlayerOnScoreboard",
		"body": [
			"function MODULE:ShouldShowPlayerOnScoreboard(client)\n\t$0\nend"
		],
		"description": "Determines whether a player should be shown on the scoreboard."
	},
	"MODULE:ShowPlayerOptions": {
		"prefix": "MODULE:ShowPlayerOptions",
		"body": [
			"function MODULE:ShowPlayerOptions(client, options)\n\t$0\nend"
		],
		"description": "Shows player options."
	},
	"MODULE:CanPlayerCreateChar": {
		"prefix": "MODULE:CanPlayerCreateChar",
		"body": [
			"function MODULE:CanPlayerCreateChar(client)\n\t$0\nend"
		],
		"description": "Whether or not a player can create a character."
	},
	"MODULE:CanPlayerJoinClass": {
		"prefix": "MODULE:CanPlayerJoinClass",
		"body": [
			"function MODULE:CanPlayerJoinClass(client, class, info)\n\t$0\nend"
		],
		"description": "Whether or not a player can join a class."
	},
	"MODULE:CanPlayerUseChar": {
		"prefix": "MODULE:CanPlayerUseChar",
		"body": [
			"function MODULE:CanPlayerUseChar(client, character)\n\t$0\nend"
		],
		"description": "Whether or not a player can use a character."
	},
	"MODULE:CharDeleted": {
		"prefix": "MODULE:CharDeleted",
		"body": [
			"function MODULE:CharDeleted(client, character)\n\t$0\nend"
		],
		"description": "Called when a character has been deleted."
	},
	"MODULE:CharHasFlags": {
		"prefix": "MODULE:CharHasFlags",
		"body": [
			"function MODULE:CharHasFlags(character, flags)\n\t$0\nend"
		],
		"description": "Whether or not a character has flags."
	},
	"MODULE:CharLoaded": {
		"prefix": "MODULE:CharLoaded",
		"body": [
			"function MODULE:CharLoaded (character)\n\t$0\nend"
		],
		"description": "Called when a character has been loaded."
	},
	"MODULE:CharPostSave": {
		"prefix": "MODULE:CharPostSave",
		"body": [
			"function MODULE:CharPostSave(character)\n\t$0\nend"
		],
		"description": "Called after a character has been saved."
	},
	"MODULE:CharPreSave": {
		"prefix": "MODULE:CharPreSave",
		"body": [
			"function MODULE:CharPreSave(character)\n\t$0\nend"
		],
		"description": "Called before a character has been saved."
	},
	"MODULE:ClassOnLoadout": {
		"prefix": "MODULE:ClassOnLoadout",
		"body": [
			"function MODULE:ClassOnLoadout(client)\n\t$0\nend"
		],
		"description": "Called when a class has been loaded out."
	},
	"MODULE:ClassPostLoadout": {
		"prefix": "MODULE:ClassPostLoadout",
		"body": [
			"function MODULE:ClassPostLoadout(client)\n\t$0\nend"
		],
		"description": "Called after a class has been loaded out."
	},
	"MODULE:FactionOnLoadout": {
		"prefix": "MODULE:FactionOnLoadout",
		"body": [
			"function MODULE:FactionOnLoadout(client)\n\t$0\nend"
		],
		"description": "Called when a faction has been loaded out."
	},
	"MODULE:FactionPostLoadout": {
		"prefix": "MODULE:FactionPostLoadout",
		"body": [
			"function MODULE:FactionPostLoadout(client)\n\t$0\nend"
		],
		"description": "Called after a faction has been loaded out."
	},
	"MODULE:GetMaxPlayerChar": {
		"prefix": "MODULE:GetMaxPlayerChar",
		"body": [
			"function MODULE:GetMaxPlayerChar(client)\n\t$0\nend"
		],
		"description": "Retrieves the maximum player characters."
	},
	"MODULE:PlayerLoadedChar": {
		"prefix": "MODULE:PlayerLoadedChar",
		"body": [
			"function MODULE:PlayerLoadedChar(client, character, curCharacter)\n\t$0\nend"
		],
		"description": "Called when a player has loaded a character."
	},
	"MODULE:PostCharDelete": {
		"prefix": "MODULE:PostCharDelete",
		"body": [
			"function MODULE:PostCharDelete(client, character)\n\t$0\nend"
		],
		"description": "Called after a character has been deleted."
	},
	"MODULE:PostPlayerLoadedChar": {
		"prefix": "MODULE:PostPlayerLoadedChar",
		"body": [
			"function MODULE:PostPlayerLoadedChar(client, character, curCharacter)\n\t$0\nend"
		],
		"description": "Called after a player has loaded a character."
	},
	"MODULE:PostPlayerLoadout": {
		"prefix": "MODULE:PostPlayerLoadout",
		"body": [
			"function MODULE:PostPlayerLoadout(client)\n\t$0\nend"
		],
		"description": "Called after a player has loaded out."
	},
	"MODULE:PrePlayerLoadedChar": {
		"prefix": "MODULE:PrePlayerLoadedChar",
		"body": [
			"function MODULE:PrePlayerLoadedChar(client, character, curCharacter)\n\t$0\nend"
		],
		"description": "Called before a player has loaded a character."
	},
	"MODULE:CanPlayerSpawnStorage": {
		"prefix": "MODULE:CanPlayerSpawnStorage",
		"body": [
			"function MODULE:CanPlayerSpawnStorage(client, entity, data)\n\t$0\nend"
		],
		"description": "Whether or not a player can spawn storage."
	},
	"MODULE:CanSaveData":{
		"prefix": "MODULE:CanSaveData",
		"body": [
			"function MODULE:CanSaveData(entity, inventory)\n\t$0\nend"
		],
		"description": "Whether or not data can be saved."
	},
	"MODULE:OnCreateStoragePanel": {
		"prefix": "MODULE:OnCreateStoragePanel",
		"body": [
			"function MODULE:OnCreateStoragePanel(localInvPanel, storageInvPanel, storage)\n\t$0\nend"
		],
		"description": "Called when a storage panel has been created."
	},
	"MODULE:StorageCanTransferItem": {
		"prefix": "MODULE:StorageCanTransferItem",
		"body": [
			"function MODULE:StorageCanTransferItem(client, storage, item)\n\t$0\nend"
		],
		"description": "Whether or not an item can be transferred to storage."
	},
	"MODULE:StorageEntityRemoved": {
		"prefix": "MODULE:StorageEntityRemoved",
		"body": [
			"function MODULE:StorageEntityRemoved(entity, inventory)\n\t$0\nend"
		],
		"description": "Called when a storage entity has been removed."
	},
	"MODULE:StorageInventorySet": {
		"prefix": "MODULE:StorageInventorySet",
		"body": [
			"function MODULE:StorageInventorySet(entity, inventory, isInitial)\n\t$0\nend"
		],
		"description": "Called when a storage inventory has been set."
	},
	"MODULE:StorageOpen":{
		"prefix": "MODULE:StorageOpen",
		"body": [
			"function MODULE:StorageOpen(entity, isCar)\n\t$0\nend"
		],
		"description": "Called when a storage has been opened."
	},
	"MODULE:StorageRestored": {
		"prefix": "MODULE:StorageRestored",
		"body": [
			"function MODULE:StorageRestored(entity, inventory)\n\t$0\nend"
		],
		"description": "Called when a storage has been restored."
	},
	"MODULE:StorageUnlockPrompt": {
		"prefix": "MODULE:StorageUnlockPrompt",
		"body": [
			"function MODULE:StorageUnlockPrompt(entity)\n\t$0\nend"
		],
		"description": "Called when a storage unlock prompt is displayed."
	},
	"MODULE:isSuitableForTrunk": {
		"prefix": "MODULE:isSuitableForTrunk",
		"body": [
			"function MODULE:isSuitableForTrunk(entity)\n\t$0\nend"
		],
		"description": "Whether or not a player is suitable for a trunk."
	},
	"MODULE:ShouldDisableThirdPerson": {
		"prefix": "MODULE:ShouldDisableThirdPerson",
		"body": [
			"function MODULE:ShouldDisableThirdPerson(client)\n\t$0\nend"
		],
		"description": "Whether or not third person should be disabled."
	},
	"MODULE:thirdPersonToggled": {
		"prefix": "MODULE:thirdPersonToggled",
		"body": [
			"function MODULE:thirdPersonToggled(state)\n\t$0\nend"
		],
		"description": "Called when third person has been toggled."
	},
	"MODULE:CanPlayerAccessVendor": {
		"prefix": "MODULE:CanPlayerAccessVendor",
		"body": [
			"function MODULE:CanPlayerAccessVendor(client, vendor)\n\t$0\nend"
		],
		"description": "Whether or not a player can access a vendor."
	},
	"MODULE:OnCharTradeVendor": {
		"prefix": "MODULE:OnCharTradeVendor",
		"body": [
			"function MODULE:OnCharTradeVendor(client, vendor, item, isSellingToVendor, character)\n\t$0\nend"
		],
		"description": "Called when a character trades with a vendor."
	},
	"MODULE:OnOpenVendorMneu":{
		"prefix": "MODULE:OnOpenVendorMneu",
		"body": [
			"function MODULE:OnOpenVendorMneu(self)\n\t$0\nend"
		],
		"description": "Called when a vendor menu has been opened."
	},
	"MODULE:PlayerAccessVendor": {
		"prefix": "MODULE:PlayerAccessVendor",
		"body": [
			"function MODULE:PlayerAccessVendor(activator, self)\n\t$0\nend"
		],
		"description": "Called when a player accesses a vendor."
	},
	"MODULE:VendorExited": {
		"prefix": "MODULE:VendorExited",
		"body": [
			"function MODULE:VendorExited()\n\t$0\nend"
		],
		"description": "Called when a player exits a vendor."
	},
	"MODULE:VendorOpened": {
		"prefix": "MODULE:VendorOpened",
		"body": [
			"function MODULE:VendorOpened(vendor)\n\t$0\nend"
		],
		"description": "Called when a player opens a vendor."
	},
	"MODULE:VendorSynchronized": {
		"prefix": "MODULE:VendorSynchronized",
		"body": [
			"function MODULE:VendorSynchronized(vendor)\n\t$0\nend"
		],
		"description": "Called when a vendor is synchronized."
	},
	"MODULE:getPriceOverride": {
		"prefix": "MODULE:getPriceOverride",
		"body": [
			"function MODULE:getPriceOverride(self, uniqueID, price, isSellingToVendor)\n\t$0\nend"
		],
		"description": "Retrieves the price override."
	}
}